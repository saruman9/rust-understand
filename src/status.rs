use std::fmt;

#[derive(Debug)]
pub enum Status {
    Okay,
    DBAlreadyOpen,
    DBBusy,
    DBChanged,
    DBCorrupt,
    DBOldVersion,
    DBUnknownVersion,
    DBUnableCreate,
    DBUnableDelete,
    DBUnableModify,
    DBUnableOpen,
    DBUnableWrite,
    DemoAnotherDBOpen,
    DemoInvalid,
    DrawNoFont,
    DrawNoImage,
    DrawTooBig,
    DrawUnableCreateFile,
    DrawUnsupportedFile,
    LexerFileModified,
    LexerFileUnreadable,
    LexerUnsupportedLanguage,
    NoApiLicense,
    NoApiLicenseAda,
    NoApiLicenseC,
    NoApiLicenseCobol,
    NoApiLicenseFtn,
    NoApiLicenseJava,
    NoApiLicenseJovial,
    NoApiLicensePascal,
    NoApiLicensePlm,
    NoApiLicensePython,
    NoApiLicenseWeb,
    NoApiLicenseVhdl,
    NoApiLicenseVerilog,
    ReportUnableCreate,
    ReportUnableDelete,
    ReportUnableWrite,
    UserAbort,
    WrongProduct,
}

impl fmt::Display for Status {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match *self {
            Status::Okay                     => write!(f, "Okay"),
            Status::DBAlreadyOpen            => write!(f, "Database already open"),
            Status::DBBusy                   => write!(f, "Database busy"),
            Status::DBChanged                => write!(f, "Database changed"),
            Status::DBCorrupt                => write!(f, "Database corrupt"),
            Status::DBOldVersion             => write!(f, "Old version of database"),
            Status::DBUnknownVersion         => write!(f, "Unknown version of database"),
            Status::DBUnableCreate           => write!(f, "Unable to create database"),
            Status::DBUnableDelete           => write!(f, "Unable to delete database"),
            Status::DBUnableModify           => write!(f, "Unable to modify database"),
            Status::DBUnableOpen             => write!(f, "Unable to open database"),
            Status::DBUnableWrite            => write!(f, "Unable to write database"),
            Status::DemoAnotherDBOpen        => write!(f, "Demo: Another database open"),
            Status::DemoInvalid              => write!(f, "Demo: invalid"),
            Status::DrawNoFont               => write!(f, "Draw: no font"),
            Status::DrawNoImage              => write!(f, "Draw: no image"),
            Status::DrawTooBig               => write!(f, "Draw: too big for draw"),
            Status::DrawUnableCreateFile     => write!(f, "Draw: unable to create file"),
            Status::DrawUnsupportedFile      => write!(f, "Draw: unsupported file"),
            Status::LexerFileModified        => write!(f, "Lexer: file modified"),
            Status::LexerFileUnreadable      => write!(f, "Lexer: file unreadable"),
            Status::LexerUnsupportedLanguage => write!(f, "Lexer: unsupported language"),
            Status::NoApiLicense             => write!(f, "API: no license"),
            Status::NoApiLicenseAda          => write!(f, "API: no license Ada"),
            Status::NoApiLicenseC            => write!(f, "API: no license C"),
            Status::NoApiLicenseCobol        => write!(f, "API: no license COBOL"),
            Status::NoApiLicenseFtn          => write!(f, "API: no license FORTRAN"),
            Status::NoApiLicenseJava         => write!(f, "API: no license Java"),
            Status::NoApiLicenseJovial       => write!(f, "API: no license Jovial"),
            Status::NoApiLicensePascal       => write!(f, "API: no license Pascal"),
            Status::NoApiLicensePlm          => write!(f, "API: no license PL/M"),
            Status::NoApiLicensePython       => write!(f, "API: no license Python"),
            Status::NoApiLicenseWeb          => write!(f, "API: no license web"),
            Status::NoApiLicenseVhdl         => write!(f, "API: no license VHDL"),
            Status::NoApiLicenseVerilog      => write!(f, "API: no license Verilog"),
            Status::ReportUnableCreate       => write!(f, "Report: unable create"),
            Status::ReportUnableDelete       => write!(f, "Report: unable delete"),
            Status::ReportUnableWrite        => write!(f, "Report: unable write"),
            Status::UserAbort                => write!(f, "Abort by user"),
            Status::WrongProduct             => write!(f, "Wrong product"),
        }
    }
}
